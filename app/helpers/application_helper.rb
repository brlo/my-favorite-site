module ApplicationHelper
  # —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤ —à–∞–ø–∫–µ)
  TEXT_SIZES = {
    '1' => 'small',
    '2' => 'medium',
    '3' => 'large',
    nil => 'small'
  }

  PAGES_LANGS = {
    'ru' => true,
    'en' => true,
    'gr' => true,
    'il' => true,
    'ar' => true,
    'jp' => true,
    'cn' => true,
    'de' => true,
  }

  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ë–∏–±–ª–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ I18n.locale
  LANG_CONTENT_TO_LANG_UI = {
    'ru'         => 'ru',
    'eng-nkjv'   => 'en',
    'csl-ru'     => 'ru',
    'csl-pnm'    => 'ru',
    'heb-osm'    => 'il',
    'gr-lxx-byz' => 'gr',
    'gr-ru'      => 'ru',
    'jp-ni'      => 'jp',
    'cn-ccbs'    => 'cn',
    'ge-sch'     => 'de',
    'arab-avd'   => 'ar',
  }

  # I18n.locale –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ë–∏–±–ª–∏–∏
  LANG_UI_TO_LANG_CONTENT = {
    # 'cs' => 'csl-ru',
    ''   => 'ru',
    nil  => 'ru',
    'ru' => 'ru',
    'en' => 'eng-nkjv',
    'il' => 'heb-osm',
    'gr' => 'gr-lxx-byz',
    'jp' => 'jp-ni',
    'cn' => 'cn-ccbs',
    'de' => 'ge-sch',
    'ar' => 'arab-avd',
  }

  # –ü–û–Ø–°–ù–ï–ù–ò–ï:
  #
  # –í –ë–∏–ª–µ–π—Å–∫–æ–π —á–∞—Å—Ç–∏ —Å–∞–π—Ç–∞ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑–∞–Ω–æ –≤ path –ª–æ–∫–∞–ª—å –∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –ë–∏–±–ª–∏–∏:
  # /ru/en-nkjv/...
  # –ü–µ—Ä–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –ø–æ–º–æ—â—å—é I18n.locale, –∞ –≤—Ç–æ—Ä–æ–µ —Å –ø–æ–º–æ—â—å—é current_bib_lang()
  #
  # –í —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (pages) –Ω–µ —Ç–∞–∫. –¢–∞–º –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –ë–∏–±–ª–∏–∏,
  # –ø–æ—ç—Ç–æ–º—É –∏ –ª–æ–∫–∞–ª—å –∏ —è–∑—ã–∫ —Å—Ç–∞—Ç—å–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ:
  # /en/en/w/–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–∞—Ç—å–∏
  # –ü–µ—Ä–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –ø–æ–º–æ—â—å—é I18n.locale, –∞ –≤—Ç–æ—Ä–æ–µ —Å –ø–æ–º–æ—â—å—é current_lang()
  #

  # –ü–æ–¥–æ–±—Ä–∞—Ç—å –Ø–ó–´–ö UI –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–µ–≤–æ–¥—É –ë–∏–±–ª–∏–∏
  def locale_for_content_lang content_lang = nil
    LANG_CONTENT_TO_LANG_UI[content_lang || params[:content_lang]]
  end

  # –ù–ê–ó–í–ê–ù–ò–ï –ü–ï–†–ï–í–û–î–ê –ë–ò–ë–õ–ò–ò (—è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–ø—Ä–µ–¥–µ–ª—è–π –ø—Ä–æ—Å—Ç–æ –ø–æ I18n.locale)
  #
  # –ê–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ä–æ—Ç–∫–æ:
  # 1) –ü—Ä—è–º–æ —É–∫–∞–∑–∞–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫ –ë–∏–±–ª–∏–∏ –≤ params[:content_lang]
  # 2) –°–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫ –ë–∏–±–ª–∏–∏ –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É params[:content_lang]
  # 3) –°–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫ –ë–∏–±–ª–∏–∏ –ø–æ —è–∑—ã–∫—É UI params[:locale]
  def current_bib_lang
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —è–∑—ã–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ë–∏–±–ª–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
    # –ò–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ë–∏–±–ª–∏–∏ –ø–æ –ª–æ–∫–∞–ª–∏.
    @current_bib_lang ||= begin
      if params[:content_lang].present?
        # –Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–∫–∞–∑–∞–Ω –∏ —Ç–∞–∫–æ–π —è–∑—ã–∫ –µ—Å—Ç—å –≤ –ë–∏–±–ª–∏–∏
        if LANG_CONTENT_TO_LANG_UI.has_key?(params[:content_lang])
          params[:content_lang]
        else
          # –ï—Å–ª–∏ —Å–º–æ—Ç—Ä–∏–º Page, —Ç–æ —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —è–∑—ã–∫–∞–º–∏ –ë–∏–±–ª–∏–∏.
          # –í–æ—Ç —Ç–∞–∫ –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫ –ë–∏–±–ª–∏–∏:
          LANG_UI_TO_LANG_CONTENT[params[:content_lang]]
        end
      elsif params[:locale].present?
        # –ï—Å–ª–∏ —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–≤—Å–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —è–∑—ã–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        LANG_UI_TO_LANG_CONTENT[params[:locale]]
      end
    end
  end

  # –Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Page (—è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–ø—Ä–µ–¥–µ–ª—è–π –ø—Ä–æ—Å—Ç–æ –ø–æ I18n.locale)
  def current_lang
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω ‚Äî –±–µ—Ä—ë–º –µ–≥–æ ‚Äî params[:content_lang],
    # –∞ –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏ (—è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞).
    @current_lang ||=
    if PAGES_LANGS[params[:content_lang]]
      params[:content_lang]
    else
      params[:locale]
    end
  end

  # –û—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞ –æ—Ç —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ (–¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  def verse_alone_clean text
    if text[-1] =~ /[\.\,\-\;\:]/
      text[0..-2]
    else
      text
    end
  end

  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫—É–∫
  def text_size_from_cookies
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫—É–∫–∞–º.
    # –ï—Å–ª–∏ –≤ –∫—É–∫–∞—Ö –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ, —Ç–æ –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
    @text_size_from_cookies ||= TEXT_SIZES[cookies[:textSize]] || TEXT_SIZES[nil]
  end

  # –î–µ–ª–∞–µ—Ç —Å—Å—ã–ª–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å—é (—Ç–µ–∫—É—â–µ–π)
  def my_link_to(path)
    "/#{I18n.locale}#{path}"
  end

  # –ê –ö–ê–ö –ñ–ï –ö–ê–ù–û–ù–ò–ö–ê–õ –Æ–†–õ?

  # –î–µ–ª–∞–µ—Ç —Å—Å—ã–ª–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å—é (—Ç–µ–∫—É—â–µ–π)
  def my_bib_link_to(path)
    "/#{I18n.locale}/#{current_bib_lang()}#{path}"
  end

  # –î–µ–ª–∞–µ—Ç —Å—Å—ã–ª–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å—é (—Ç–µ–∫—É—â–µ–π)
  def my_page_link_to(path)
    "/#{I18n.locale}/#{current_lang()}/w#{path}"
  end

  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å
  if Rails.env.production?
    def my_res_link_to(path)
      "https://res.bibleox.com#{path}"
    end
  else
    def my_res_link_to(path)
      path
    end
  end

  def flag_by_lang lang
    case lang.to_s.downcase
    when 'ru'; 'üá∑üá∫'
    when 'en'; 'üá∫üá∏'
    when 'gr'; 'üá¨üá∑'
    when 'jp'; 'üáØüáµ'
    end
  end

  def day_visit
    @count_visit ||= ::PageVisits.day_visit(browser: browser)
  end

  def page_visit(id)
    @page_visit ||= ::PageVisits.visit(id, browser: browser)
  end

  def interliner_helper(words, dict)
    translate = dict[:dict]
    translate_simple = dict[:dict_simple]
    translate_simple_no_endings = dict[:dict_simple_no_endings]
    transcript = dict[:dict_transcriptions]

    words.map do |w|
      # –ø–µ—Ä–µ–≤–æ–¥
      _w = w.unicode_normalize(:nfd).downcase.strip
      trnsl = translate[_w]
      trsc = transcript[_w]

      # –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
      ws = ::DictWord.word_clean_gr(w)
      trnsl_simple = translate_simple[ws]

      # –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏–π
      wse = ::DictWord.remove_greek_ending(ws)
      data_simple_no_endings = translate_simple_no_endings[wse]

      s  = "<ruby>#{ w }"
      if trnsl
        w_link = w.unicode_normalize(:nfd).downcase.delete("\u0300-\u036F")
        s += "<rt><a href='/#{I18n.locale}/words/#{ w_link }'>#{ trnsl }</a></rt>"
      elsif trnsl_simple
        w_link = w.unicode_normalize(:nfd).downcase.delete("\u0300-\u036F")
        s += "<rt><a href='/#{I18n.locale}/words/#{ w_link }'>#{ trnsl_simple }</a></rt>"
      elsif data_simple_no_endings
        trnsl_simple_no_endings = data_simple_no_endings[0]
        word_full = data_simple_no_endings[1]
        w_link = word_full.unicode_normalize(:nfd).downcase.delete("\u0300-\u036F")
        s += "<rt><a href='/#{I18n.locale}/words/#{ w_link }'>[#{ trnsl_simple_no_endings }]</a></rt>"
      elsif trsc
        s += "<rt>#{ trsc }</rt>"
      end
      s += "</ruby>"
    end.join
  end
end
